services:
  postgres:
    image: postgres:17
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ${SHARED_DATA_PATH}/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  scrapper:
    build:
      context: ./scrapper
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    volumes:
      - ${SHARED_DATA_PATH}:/data

  vespa:
    image: vespaengine/vespa
    container_name: vespa
    env_file:
      - .env
    ports:
      - "8080:8080"
      - "19071:19071"
    environment:
      - VESPA_CONFIGSERVE=false
    volumes:
      - ./vespa:/app/package
      - ./vespa/data:/opt/vespa/var
      - ./vespa/deploy-and-start.sh:/deploy-and-start.sh
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:19071/state/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    post_start:
      - command: ["/bin/sh", "-c", "/deploy-and-start.sh"]

  feeder:
    build:
      context: ./feeder
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      vespa:
        condition: service_healthy
    networks:
      - backend
    volumes:
      - ${SHARED_DATA_PATH}:/data

networks:
  backend:
    driver: bridge
